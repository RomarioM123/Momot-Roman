/**
* @file FuncTester.cpp
* Файл реалізації методів класу-тестера
* @author Momot Roman
* @version 1.0
* @date 2020.05.26
*/

#include "FuncTester.h"						/** Підключення файлу FuncTester.h */

void FuncTester::Add_Test()					/** Реалізація тестування метода додавання програми */
{
	if (value.AddProgram(2) == 10)			/** Виклик метода додавання програми */
		cout << "Тест функции добавления программы\t выполнен успешно." << endl;
	else
		cout << "Тест функции добавления программы\t не выполнен успешно." << endl;
}
void FuncTester::Delete_Test()				/** Реалізація тестування метода видалення програми */
{	
	if (value.DeleteProgram(65) == 9)		/** Виклик метода видалення програми */
		cout << "Тест функции удаления программы\t\t выполнен успешно." << endl;
	else
		cout << "Тест функции удаления программы\t\t не выполнен успешно." << endl;
}
void FuncTester::ReadFile_Test()			/** Реалізація тестування метода читання даних з файлу */
{
	if(value.ReadFile("data.txt") == 4)		/** Виклик метода читання даних з файлу */
		cout << "Тест функции чтения файла\t\t выполнен успешно." << endl;
	else
		cout << "Тест функции чтения из файла\t\t не выполнен успешно." << endl;
}
void FuncTester::SaveFile_Test()			/** Реалізація тестування метода виведення даних у файл */
{	
	if (value.SaveFile("Test.txt") == 9)	/** Виклик метода виведення даних у файл */
		cout << "Тест функции сохранения в файл\t\t выполнен успешно." << endl;
	else
		cout << "Тест функции сохранения в файл\t\t не выполнен успешно." << endl;
}
void FuncTester::Sort_Test()				/** Реалізація тестування метода сортування */
{
	Functor funct(0, 2);					/** Створення елемента класу Functor */
	int beforeSort = value.GetIndex(0);
	value.Sort(funct);						/** Виклик метода сортування */
	int afterSort = value.GetIndex(0);

	if (beforeSort != afterSort && afterSort < value.GetIndex(2))
		cout << "Тест функции сортировки списка\t\t выполнен успешно." << endl << endl;
	else
		cout << "Тест функции сортировки списка\t\t не выполнен успешно." << endl << endl;
}
void FuncTester::Task_Test()				/** Реалізація тестування метода реалізації індивідуального завдання */
{	
	if (value.Task(100) == 7)				/** Виклик метода реалізації індивідуального завдання */
		cout << endl << "Тест функции индивидуального задания\t выполнен успешно." << endl;
	else
		cout << endl << "Тест функции индивидуального задания\t не выполнен успешно." << endl;
}

FuncTester::FuncTester() {}					/** Реалізація конструктора за замовчуванням */
FuncTester::~FuncTester() {}				/** Реалізація деструктора */

